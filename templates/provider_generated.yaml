AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Thingpress Provider for Generated Certificates
  
  This template deploys a Lambda function that processes certificate files generated by
  the generate_certificates.py script and forwards them to the bulk importer.

Parameters:
  TargetQueueUrl:
    Type: String
    Description: URL of the target SQS queue for certificate processing
  
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket where certificate files will be uploaded
  
  S3NotificationPrefix:
    Type: String
    Default: "certificates/"
    Description: Prefix for S3 notifications (only process objects with this prefix)
  
  LambdaMemorySize:
    Type: Number
    Default: 256
    Description: Memory size for the Lambda function (MB)
  
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: Timeout for the Lambda function (seconds)

Resources:
  # Lambda function for processing generated certificates
  GeneratedCertificateProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/provider_generated/
      Handler: main.lambda_handler
      Runtime: python3.9
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          QUEUE_TARGET: !Ref TargetQueueUrl
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - SQSSendMessagePolicy:
            QueueName: !Select [5, !Split ['/', !Ref TargetQueueUrl]]
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt GeneratedCertificateQueue.Arn
            BatchSize: 10
  
  # SQS queue for receiving S3 event notifications
  GeneratedCertificateQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt GeneratedCertificateDLQ.Arn
        maxReceiveCount: 3
  
  # Dead letter queue for failed processing
  GeneratedCertificateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600  # 14 days
  
  # S3 bucket notification configuration
  S3BucketNotificationToSQS:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt GeneratedCertificateQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:s3:::${S3BucketName}
  
  # S3 event notification configuration
  S3EventNotification:
    Type: Custom::S3BucketNotification
    Properties:
      ServiceToken: !GetAtt S3EventNotificationFunction.Arn
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: !Ref S3NotificationPrefix
            Queue: !GetAtt GeneratedCertificateQueue.Arn
  
  # Lambda function to configure S3 event notifications
  S3EventNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import boto3
        import cfnresponse
        import json
        
        def handler(event, context):
            try:
                if event['RequestType'] == 'Delete':
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                    return
                
                props = event['ResourceProperties']
                bucket_name = props['BucketName']
                notification = props['NotificationConfiguration']
                
                s3 = boto3.client('s3')
                s3.put_bucket_notification_configuration(
                    Bucket=bucket_name,
                    NotificationConfiguration=notification
                )
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
      Handler: index.handler
      Runtime: python3.9
      Timeout: 60
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketNotification
                - s3:GetBucketNotification
              Resource: !Sub arn:aws:s3:::${S3BucketName}

Outputs:
  GeneratedCertificateProviderFunction:
    Description: Lambda function for processing generated certificates
    Value: !Ref GeneratedCertificateProviderFunction
  
  GeneratedCertificateQueue:
    Description: SQS queue for receiving S3 event notifications
    Value: !Ref GeneratedCertificateQueue
  
  GeneratedCertificateDLQ:
    Description: Dead letter queue for failed processing
    Value: !Ref GeneratedCertificateDLQ
