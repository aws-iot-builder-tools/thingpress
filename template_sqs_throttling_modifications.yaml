# SQS Throttling Optimization - Template Modifications
# This shows the CloudFormation template changes needed for automatic throttling

Parameters:
  # Existing parameters...
  
  # New throttling parameters
  AutoThrottlingEnabled:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable automatic SQS-based throttling
    
  ThrottlingDelaySeconds:
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 900
    Description: Base delay in seconds for throttling (0-900)
    
  ProviderConcurrencyLimit:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 100
    Description: Maximum concurrent executions for provider functions

Resources:
  # Enhanced Generated Provider Queue with throttling options
  ThingpressGeneratedProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Generated-Provider-Queue-${AWS::StackName}
      SqsManagedSseEnabled: true
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      # Optional: Add delay for automatic throttling
      DelaySeconds: !If 
        - EnableAutoThrottling
        - !Ref ThrottlingDelaySeconds
        - 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressGeneratedProviderDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Queue
        - Key: ThrottlingEnabled
          Value: !Ref AutoThrottlingEnabled

  # Alternative: Separate throttled queue for high-load scenarios
  ThingpressGeneratedProviderThrottledQueue:
    Type: AWS::SQS::Queue
    Condition: EnableAutoThrottling
    Properties:
      QueueName: !Sub Thingpress-Generated-Provider-Throttled-${AWS::StackName}
      SqsManagedSseEnabled: true
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      DelaySeconds: !Ref ThrottlingDelaySeconds
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressGeneratedProviderDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: ThrottledQueue

  # Enhanced Generated Provider Function with concurrency control
  ThingpressGeneratedProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_generated/
      Handler: provider_generated.main.lambda_handler
      Runtime: python3.13
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      # Add reserved concurrency for throttling
      ReservedConcurrencyUnits: !Ref ProviderConcurrencyLimit
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          QUEUE_TARGET_THROTTLED: !If
            - EnableAutoThrottling
            - !Ref ThingpressGeneratedProviderThrottledQueue
            - !Ref ThingpressBulkImporterQueue
          POWERTOOLS_IDEMPOTENCY_TABLE: !Ref ThingpressIdempotencyTable
          POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: !Ref IdempotencyExpirySeconds
          # Throttling configuration
          AUTO_THROTTLING_ENABLED: !Ref AutoThrottlingEnabled
          THROTTLING_BASE_DELAY: !Ref ThrottlingDelaySeconds
          BATCH_PROCESSING_ENABLED: 'true'
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ThingpressGeneratedManifestBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
        - !If
          - EnableAutoThrottling
          - SQSSendMessagePolicy:
              QueueName: !GetAtt ThingpressGeneratedProviderThrottledQueue.QueueName
          - !Ref AWS::NoValue
        - DynamoDBCrudPolicy:
            TableName: !Ref ThingpressIdempotencyTable
        # Add permission to read queue attributes for throttling
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:GetQueueAttributes
              Resource: 
                - !GetAtt ThingpressBulkImporterQueue.Arn
                - !If
                  - EnableAutoThrottling
                  - !GetAtt ThingpressGeneratedProviderThrottledQueue.Arn
                  - !Ref AWS::NoValue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ThingpressGeneratedProviderQueue.Arn
            BatchSize: 10
            # Enhanced batch configuration
            MaximumBatchingWindowInSeconds: 5
            FunctionResponseTypes:
              - ReportBatchItemFailures

  # CloudWatch Alarms for monitoring throttling effectiveness
  ThingpressQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Thingpress-Queue-Depth-High-${AWS::StackName}
      AlarmDescription: Alert when queue depth is high
      MetricName: ApproximateNumberOfMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ThingpressBulkImporterQueue.QueueName
      TreatMissingData: notBreaching

  ThingpressProcessingLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Thingpress-Processing-Latency-High-${AWS::StackName}
      AlarmDescription: Alert when processing latency is high
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 600  # 10 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ThingpressBulkImporterQueue.QueueName
      TreatMissingData: notBreaching

  # Custom CloudWatch Dashboard for monitoring
  ThingpressMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub Thingpress-SQS-Monitoring-${AWS::StackName}
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "${ThingpressBulkImporterQueue.QueueName}" ],
                  [ ".", "NumberOfMessagesReceived", ".", "." ],
                  [ ".", "ApproximateNumberOfMessages", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "SQS Message Flow"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ThingpressGeneratedProviderFunction}" ],
                  [ ".", "Invocations", ".", "." ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "ConcurrentExecutions", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Performance"
              }
            }
          ]
        }

Conditions:
  EnableAutoThrottling: !Equals [!Ref AutoThrottlingEnabled, 'true']

Outputs:
  # Existing outputs...
  
  # New throttling-related outputs
  AutoThrottlingEnabled:
    Description: Whether automatic throttling is enabled
    Value: !Ref AutoThrottlingEnabled
    
  ThrottlingDelaySeconds:
    Description: Base delay for throttling in seconds
    Value: !Ref ThrottlingDelaySeconds
    
  ProviderConcurrencyLimit:
    Description: Maximum concurrent executions for provider functions
    Value: !Ref ProviderConcurrencyLimit
    
  ThrottledQueueUrl:
    Condition: EnableAutoThrottling
    Description: URL of the throttled queue for high-load scenarios
    Value: !Ref ThingpressGeneratedProviderThrottledQueue
    
  MonitoringDashboard:
    Description: CloudWatch dashboard for monitoring SQS and Lambda performance
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ThingpressMonitoringDashboard}"

# Additional configuration for other provider queues would follow the same pattern:
# - ThingpressEspressifProviderQueue
# - ThingpressInfineonProviderQueue  
# - ThingpressMicrochipProviderQueue
