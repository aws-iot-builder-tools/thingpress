@startuml
title Thingpress Bulk Importer Lambda Function Sequence

actor "AWS Lambda" as Lambda
participant "lambda_handler" as Handler
participant "process_sqs" as ProcessSQS
participant "process_certificate" as ProcessCert
participant "process_thing" as ProcessThing
participant "process_policy" as ProcessPolicy
participant "process_thing_group" as ProcessGroup
participant "process_thing_type" as ProcessType
participant "cert_utils" as CertUtils
participant "aws_utils" as AWSUtils
database "AWS IoT Core" as IoTCore

Lambda -> Handler: Invoke with SQS event
activate Handler

loop for each SQS record
    Handler -> ProcessSQS: process_sqs(config)
    activate ProcessSQS
    
    ProcessSQS -> ProcessCert: process_certificate(config)
    activate ProcessCert
    
    ProcessCert -> CertUtils: decode_certificate(payload)
    activate CertUtils
    CertUtils --> ProcessCert: decoded_certificate
    deactivate CertUtils
    
    ProcessCert -> CertUtils: load_certificate(decoded_certificate)
    activate CertUtils
    CertUtils --> ProcessCert: x509_certificate
    deactivate CertUtils
    
    ProcessCert -> CertUtils: get_certificate_fingerprint(x509_certificate)
    activate CertUtils
    CertUtils --> ProcessCert: fingerprint
    deactivate CertUtils
    
    ProcessCert -> AWSUtils: get_certificate(fingerprint)
    activate AWSUtils
    
    AWSUtils -> IoTCore: describe_certificate(certificateId)
    activate IoTCore
    
    alt Certificate already exists
        IoTCore --> AWSUtils: certificate details
        AWSUtils --> ProcessCert: certificate_id
        note right of ProcessCert: Certificate already found
    else Certificate not found
        IoTCore --> AWSUtils: ClientError (ResourceNotFoundException)
        AWSUtils --> ProcessCert: ClientError
        ProcessCert -> AWSUtils: register_certificate(decoded_certificate)
        AWSUtils -> IoTCore: register_certificate_without_ca(certificatePem)
        IoTCore --> AWSUtils: certificate details
        AWSUtils --> ProcessCert: certificate_id
        note right of ProcessCert: Certificate imported
    end
    
    deactivate IoTCore
    deactivate AWSUtils
    
    ProcessCert --> ProcessSQS: certificate_id
    deactivate ProcessCert
    
    ProcessSQS -> ProcessThing: process_thing(thing_name, certificate_id)
    activate ProcessThing
    
    ProcessThing -> AWSUtils: get_certificate_arn(certificate_id)
    activate AWSUtils
    AWSUtils -> IoTCore: describe_certificate(certificateId)
    activate IoTCore
    IoTCore --> AWSUtils: certificate details with ARN
    AWSUtils --> ProcessThing: certificate_arn
    deactivate IoTCore
    deactivate AWSUtils
    
    ProcessThing -> IoTCore: describe_thing(thingName)
    activate IoTCore
    
    alt Thing already exists
        IoTCore --> ProcessThing: thing details
        note right of ProcessThing: Thing already exists
    else Thing not found
        IoTCore --> ProcessThing: ClientError (ResourceNotFoundException)
        ProcessThing -> IoTCore: create_thing(thingName)
        IoTCore --> ProcessThing: thing details
        note right of ProcessThing: Thing created
    end
    
    ProcessThing -> IoTCore: attach_thing_principal(thingName, principal=certificate_arn)
    IoTCore --> ProcessThing: success
    deactivate IoTCore
    
    ProcessThing --> ProcessSQS: void
    deactivate ProcessThing
    
    ProcessSQS -> ProcessPolicy: process_policy(policy_name, certificate_id)
    activate ProcessPolicy
    
    alt Policy name is valid
        ProcessPolicy -> IoTCore: attach_policy(policyName, target=certificate_arn)
        activate IoTCore
        IoTCore --> ProcessPolicy: success
        deactivate IoTCore
    else Policy name is None or empty
        note right of ProcessPolicy: Skip policy attachment
    end
    
    ProcessPolicy --> ProcessSQS: void
    deactivate ProcessPolicy
    
    ProcessSQS -> ProcessGroup: process_thing_group(thing_group_arn, thing_name)
    activate ProcessGroup
    
    alt Thing group ARN is valid
        ProcessGroup -> IoTCore: add_thing_to_thing_group(thingGroupArn, thingArn)
        activate IoTCore
        IoTCore --> ProcessGroup: success
        deactivate IoTCore
    else Thing group ARN is None
        note right of ProcessGroup: Skip thing group attachment
    end
    
    ProcessGroup --> ProcessSQS: void
    deactivate ProcessGroup
    
    ProcessSQS -> ProcessType: process_thing_type(thing_name, thing_type_name)
    activate ProcessType
    
    alt Thing type name is valid
        ProcessType -> IoTCore: update_thing(thingName, thingTypeName)
        activate IoTCore
        IoTCore --> ProcessType: success
        deactivate IoTCore
    else Thing type name is None or empty
        note right of ProcessType: Skip thing type attachment
    end
    
    ProcessType --> ProcessSQS: void
    deactivate ProcessType
    
    ProcessSQS --> Handler: void
    deactivate ProcessSQS
end

Handler --> Lambda: Return event
deactivate Handler

@enduml
