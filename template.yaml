# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Serverless Application Model (SAM) template for infra IAC
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  ThingPress instance for importing certificates via Multi Account Registration at scale.

Globals:
  Function:
    Timeout: 3

Metadata:
  AWS::ServerlessRepo::Application:
    Name: ThingPress
    Description: An application that accelerates Multi-Account Registration bulk
      certificate provisioning for the Internet of Things.
    Author: Richard Elberger (rpcme)
    SpdxLicense: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/aws-iot-builder-tools/thingpress
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/aws-iot-builder-tools/thingpress

Parameters:

  IamUserArn:
    Default: None
    Description: The ARN for the user having access to the S3 bucket for uploading
      manifests.
    Type: String

  IoTPolicy:
    Default: None
    Type: String
    Description: The AWS IoT Policy that you will apply to every certificate being
      imported. Using best practice techniques, abstract the Policy using Policy
      variables.

  IoTThingGroup:
    Default: None
    Type: String
    Description: The AWS IoT Thing Group you apply to the Thing being created. Put
      None if no Thing Group.

  IoTThingType:
    Default: None
    Type: String
    Description: The AWS IoT Thing Type you apply to the Thing being created. Put
      None if no Thing Type.

  MicrochipVerifyCertName:
    Default: verify-cert.cer
    Type: String
    Description: 'Microchip only: The verify certificate that is provided by
      Microchip. This must not have a .json filename suffix.'

  InfineonCertBundleType:
    Default: E0E0
    Type: String
    Description: 'Infineon only: choose from bundle E0E0, E0E1, or E0E2'

  ConcurrentExecutions:
    Default: '10'
    Type: Number
    Description: By default the concurrent executions for the bulk importer is 10
      since the IoT Limit TPS for most APIs is 10, and there is some
      balance.  In case of throttling failure, the payload will be requeued.

Resources:
  ThingpressUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layer_utils
      CompatibleRuntimes:
        - python3.13
      LayerName: !Sub thingpress-utils-${AWS::StackName}
      LicenseInfo: MIT-0
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.13

  # S3 Bucket to receive Espressif manifest payload which is an
  # CSV file with vendor defined structure.
  ThingpressEspressifManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub thingpress-espressif-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 bucket for generated certificates
  ThingpressGeneratedManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub thingpress-generated-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket to receive Infineon manifest payload which is a
  # 7-Zip compressed file having embedded compressed files.
  ThingpressInfineonManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub thingpress-infineon-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket to receive Microchip manifest payload which is a
  # JSON file having a vendor defined structure.
  ThingpressMicrochipManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub thingpress-microchip-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Allow Espressif bucket event to invoke the product provider function
  ThingpressProductProviderInvokeFromEspressifPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressProductProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressEspressifManifestBucket.Arn

  # Allow Infineon bucket event to invoke the product provider function
  ThingpressProductProviderInvokeFromInfineonPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressProductProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressInfineonManifestBucket.Arn

  # Allow Microchip bucket event to invoke the product provider function
  ThingpressProductProviderInvokeFromMicrochipPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressProductProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressMicrochipManifestBucket.Arn

  # Invoked on S3 event, the product provider evaluates configuration
  # prior to passing along normalized configuration (object ARN resolution,
  # S3 object validation) to the supplier-specific queue.
  ThingpressProductProviderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub Thingpress-Product-Provider-Role-${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: aws-api-calls
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeThingGroup
                  - iot:DescribeThingType
                  - iot:GetPolicy
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: '*'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ThingpressProductProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/product_provider/
      Handler: main.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ThingpressProductProviderFunctionRole.Arn
      Timeout: 300
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET_ESPRESSIF: !Ref ThingpressEspressifProviderQueue
          QUEUE_TARGET_INFINEON: !Ref ThingpressInfineonProviderQueue
          QUEUE_TARGET_MICROCHIP: !Ref ThingpressMicrochipProviderQueue
          QUEUE_TARGET_GENERATED: !Ref ThingpressGeneratedProviderQueue
          POLICY_NAME: !Ref IoTPolicy
          THING_GROUP_NAME: !Ref IoTThingGroup
          THING_TYPE_NAME: !Ref IoTThingType
      Events:
        EV1:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressInfineonManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .7z
        EV2:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressEspressifManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .csv
        EV3:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressMicrochipManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .json
        EV4:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressGeneratedManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .txt

  # Dead letter queue for Generated provider
  ThingpressGeneratedProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Generated-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # 14 days

  # The product provider lambda function sends a message to this queue if the
  # manifest source comes from the Generated certificates bucket.
  ThingpressGeneratedProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Generated-Provider-Queue-${AWS::StackName}
      SqsManagedSseEnabled: true
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressGeneratedProviderDLQ.Arn
        maxReceiveCount: 3

  # Lambda function for processing generated certificates
  ThingpressGeneratedProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_generated/
      Handler: main.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 300
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ThingpressGeneratedManifestBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ThingpressGeneratedProviderQueue.Arn
            BatchSize: 10

  ThingpressEspressifProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Espressif-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # 14 days

  ThingpressEspressifProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Espressif-Provider-${AWS::StackName}
      VisibilityTimeout: 900
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressEspressifProviderDLQ.Arn
        maxReceiveCount: 5

  ThingpressEspressifProviderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressEspressifProviderQueue
      PolicyDocument:
        Id: ProviderQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: ProviderQueuePolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource:
              - !GetAtt ThingpressEspressifProviderQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductProviderFunctionRole.Arn

  # Dead letter queue for Infineon provider
  ThingpressInfineonProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Infineon-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # 14 days

  ThingpressInfineonProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Infineon-Provider-${AWS::StackName}
      VisibilityTimeout: 900
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressInfineonProviderDLQ.Arn
        maxReceiveCount: 5

  ThingpressInfineonProviderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressInfineonProviderQueue
      PolicyDocument:
        Id: ProviderQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: ProviderQueuePolicySId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              - !GetAtt ThingpressInfineonProviderQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductProviderFunctionRole.Arn

  # Dead letter queue for Microchip provider
  ThingpressMicrochipProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Microchip-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # 14 days

  ThingpressMicrochipProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Microchip-Provider-${AWS::StackName}
      VisibilityTimeout: 900
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressMicrochipProviderDLQ.Arn
        maxReceiveCount: 5

  ThingpressSiliconProviderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressMicrochipProviderQueue
      PolicyDocument:
        Id: ProviderQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: ProviderQueuePolicySId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              - !GetAtt ThingpressMicrochipProviderQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductProviderFunctionRole.Arn

  #--------------------------------------------------------------------------
  # Espressif provider function configuration
  #--------------------------------------------------------------------------
  ThingpressEspressifProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressEspressifProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressEspressifProviderQueue.Arn
  ThingpressEspressifProviderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub Thingpress-Espressif-Provider-Function-Role-${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  ThingpressEspressifProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_espressif/
      Handler: main.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ThingpressEspressifProviderFunctionRole.Arn
      Timeout: 900
      Layers:
        - !Ref ThingpressUtilsLayer
      MemorySize: 2048
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressEspressifProviderQueue.Arn

  #--------------------------------------------------------------------------
  # Infineon provider function configuration
  #--------------------------------------------------------------------------
  ThingpressInfineonProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressInfineonProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressInfineonProviderQueue.Arn
  ThingpressInfineonProviderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub Thingpress-Infineon-Provider-Function-Role-${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  ThingpressInfineonProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_infineon/
      Handler: provider_infineon.main.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ThingpressInfineonProviderFunctionRole.Arn
      Timeout: 900
      Layers:
        - !Ref ThingpressUtilsLayer
      MemorySize: 2048
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          CERT_TYPE: !Ref InfineonCertBundleType
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressInfineonProviderQueue.Arn
  #--------------------------------------------------------------------------
  # Microchip provider function configuration
  #--------------------------------------------------------------------------
  ThingpressMicrochipProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressMicrochipProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressMicrochipProviderQueue.Arn
  ThingpressMicrochipProviderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub Thingpress-Microchip-Provider-Function-Role-${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  ThingpressMicrochipProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_microchip/
      Handler: provider_microchip.main.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ThingpressMicrochipProviderFunctionRole.Arn
      Timeout: 900
      Layers:
        - !Ref ThingpressUtilsLayer
      MemorySize: 2048
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          VERIFY_CERT: !Ref MicrochipVerifyCertName
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressMicrochipProviderQueue.Arn

  #--------------------------------------------------------------------------
  # Bulk importer queue configuration
  #--------------------------------------------------------------------------
  # Dead letter queue for Bulk Importer
  ThingpressBulkImporterDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Bulk-Importer-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # 14 days

  ThingpressBulkImporterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Bulk-Importer-${AWS::StackName}
      VisibilityTimeout: 900
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressBulkImporterDLQ.Arn
        maxReceiveCount: 5

  ThingpressBulkImporterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressBulkImporterQueue
      PolicyDocument:
        Id: BulkImporterQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: BulkImporterQueuePolicySId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Effect: Allow
            Resource: !GetAtt ThingpressBulkImporterQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressBulkImporterFunctionRole.Arn
                - !GetAtt ThingpressEspressifProviderFunctionRole.Arn
                - !GetAtt ThingpressInfineonProviderFunctionRole.Arn
                - !GetAtt ThingpressMicrochipProviderFunctionRole.Arn
  #--------------------------------------------------------------------------
  # Bulk importer function configuration
  #--------------------------------------------------------------------------
  ThingpressBulkImporterInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressBulkImporterFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressBulkImporterQueue.Arn
  ThingpressBulkImporterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub Thingpress-Bulk-Importer-Function-Role-${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  ThingpressBulkImporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bulk_importer/
      Handler: main.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ThingpressBulkImporterFunctionRole.Arn
      ReservedConcurrentExecutions: !Ref ConcurrentExecutions
      Timeout: 300
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressBulkImporterQueue.Arn

  ThingpressEspressifProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressEspressifProviderDLQ
      PolicyDocument:
        Id: EspressifProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: EspressifProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressEspressifProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressEspressifProviderQueue.Arn

  ThingpressInfineonProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressInfineonProviderDLQ
      PolicyDocument:
        Id: InfineonProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: InfineonProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressInfineonProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressInfineonProviderQueue.Arn

  ThingpressMicrochipProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressMicrochipProviderDLQ
      PolicyDocument:
        Id: MicrochipProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: MicrochipProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressMicrochipProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressMicrochipProviderQueue.Arn

  ThingpressBulkImporterDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressBulkImporterDLQ
      PolicyDocument:
        Id: BulkImporterDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: BulkImporterDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressBulkImporterDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressBulkImporterQueue.Arn

  ThingpressGeneratedProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressGeneratedProviderDLQ
      PolicyDocument:
        Id: GeneratedProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: GeneratedProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressGeneratedProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressGeneratedProviderQueue.Arn

Outputs:
  EspressifIngestPoint:
    Description: The Amazon S3 bucket for uploading Espressif manifests (CSV)
    Value: !Ref ThingpressEspressifManifestBucket
  InfineonIngestPoint:
    Description: The Amazon S3 bucket for uploading Infineon manifests (7z)
    Value: !Ref ThingpressInfineonManifestBucket
  MicrochipIngestPoint:
    Description: The Amazon S3 bucket for uploading Microchip manifests (JSON)
    Value: !Ref ThingpressMicrochipManifestBucket
  GeneratedIngestPoint:
    Description: The Amazon S3 bucket for uploading Generated certificate files (TXT)
    Value: !Ref ThingpressGeneratedManifestBucket
  # DLQ policies