# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Serverless Application Model (SAM) template for infra IAC
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  ThingPress instance for importing certificates via Multi Account Registration at scale.

Globals:
  Function:
    # Default settings for all functions
    Tags:
      Application: Thingpress

Metadata:
  AWS::ServerlessRepo::Application:
    Name: ThingPress
    Description: An application that accelerates Multi-Account Registration bulk
      certificate provisioning for the Internet of Things.
    Author: Richard Elberger (rpcme)
    SpdxLicense: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/aws-iot-builder-tools/thingpress
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/aws-iot-builder-tools/thingpress

Parameters:

  IamUserArn:
    Default: None
    Description: The ARN for the user having access to the S3 bucket for uploading
      manifests.
    Type: String

  IoTPolicy:
    Default: None
    Type: String
    Description: The AWS IoT Policy that you will apply to every certificate being
      imported. Using best practice techniques, abstract the Policy using Policy
      variables.

  IoTThingGroup:
    Default: None
    Type: String
    Description: The AWS IoT Thing Group you apply to the Thing being created. Put
      None if no Thing Group.

  IoTThingType:
    Default: None
    Type: String
    Description: The AWS IoT Thing Type you apply to the Thing being created. Put
      None if no Thing Type.

  InfineonCertBundleType:
    Default: E0E0
    Type: String
    Description: 'Infineon only: choose from bundle E0E0, E0E1, or E0E2'

  ConcurrentExecutions:
    Default: '10'
    Type: Number
    Description: By default the concurrent executions for the bulk importer is 10
      since the IoT Limit TPS for most APIs is 10, and there is some
      balance.  In case of throttling failure, the payload will be requeued.
      
  DLQRetentionPeriod:
    Type: Number
    Default: 1209600
    Description: Retention period for Dead Letter Queues in seconds (default 14 days)
    
  QueueVisibilityTimeout:
    Type: Number
    Default: 900
    Description: Visibility timeout for SQS queues in seconds (default 15 minutes)
    
  IdempotencyExpirySeconds:
    Type: Number
    Default: 3600
    Description: Expiry time for idempotency records in seconds (default 1 hour)
    
  # SQS Throttling Configuration
  AutoThrottlingEnabled:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable automatic SQS-based throttling to prevent system overload
    
  ThrottlingBaseDelay:
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 300
    Description: Base delay in seconds for throttling calculations (0-300 seconds)
    
  ThrottlingBatchInterval:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Apply throttling delay every N batches (e.g., 3 = every third batch)
    
  MaxQueueDepth:
    Type: Number
    Default: 1000
    MinValue: 100
    MaxValue: 10000
    Description: Maximum queue depth before aggressive throttling kicks in
    
  ProviderConcurrencyLimit:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 100
    Description: Maximum concurrent executions for provider functions (throttling)
    
  LambdaMemorySize:
    Type: Number
    Default: 2048
    Description: Memory size for Lambda functions in MB (default 2048 MB)
    
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: Timeout for Lambda functions in seconds (default 5 minutes)

Conditions:
  EnableAutoThrottling: !Equals [!Ref AutoThrottlingEnabled, 'true']

Resources:
  # Idempotency table for Lambda functions
  ThingpressIdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Idempotency

  ThingpressUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layer_utils
      CompatibleRuntimes:
        - python3.13
      LayerName: !Sub thingpress-utils-${AWS::StackName}
      LicenseInfo: MIT-0
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.13

  # S3 Bucket to receive Espressif manifest payload which is an
  # CSV file with vendor defined structure.
  ThingpressEspressifManifestBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub thingpress-espressif-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 bucket for generated certificates
  ThingpressGeneratedManifestBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub thingpress-generated-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket to receive Infineon manifest payload which is a
  # 7-Zip compressed file having embedded compressed files.
  ThingpressInfineonManifestBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub thingpress-infineon-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  # S3 Bucket for Microchip verification certificates (separate from manifest bucket)
  ThingpressMicrochipVerificationCertsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub thingpress-microchip-certs-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket to receive Microchip manifest payload which is a
  # JSON file with vendor defined structure.
  ThingpressMicrochipManifestBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub thingpress-microchip-${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
            Function: !GetAtt ThingpressProductVerifierFunction.Arn

  # Certificate deployer Lambda function
  ThingpressCertificateDeployerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/certificate_deployer/
      Handler: certificate_deployer.main.lambda_handler
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Layers:
        - !Ref ThingpressUtilsLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ThingpressMicrochipVerificationCertsBucket
        - Statement:
            - Effect: Allow
              Action:
                - s3:*
                #- s3:PutObject
              Resource: !Sub "arn:aws:s3:::*"
      Environment:
        Variables:
          LOG_LEVEL: INFO

  # Deploy Microchip verifier certificates to separate bucket
  ThingpressMicrochipVerifierCertificates:
    Type: Custom::MicrochipVerifierCertificates
    Properties:
      ServiceToken: !GetAtt ThingpressCertificateDeployerFunction.Arn
      BucketName: !Ref ThingpressMicrochipVerificationCertsBucket
      Certificates:
        MCHP_manifest_signer_5_Mar_6-2024_noExpiration.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUIwakNDQVhpZ0F3SUJBZ0lRY1AxNGhMbHdVcGlyM2k4dGR6cm1oVEFLQmdncWhrak9QUVFEQWpCQk1TRXcKSHdZRFZRUUtEQmhOYVdOeWIyTm9hWEFnVkdWamFHNXZiRzluZVNCSmJtTXhIREFhQmdOVkJBTU1FMDFoYm1sbQpaWE4wSUZOcFoyNWxjaUF3TURVd0lCY05NalF3TXpBM01ERXpNakk0V2hnUE9UazVPVEV5TXpFeU16VTVOVGxhCk1FRXhJVEFmQmdOVkJBb01HRTFwWTNKdlkyaHBjQ0JVWldOb2JtOXNiMmQ1SUVsdVl6RWNNQm9HQTFVRUF3d1QKVFdGdWFXWmxjM1FnVTJsbmJtVnlJREF3TlRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkV5dgpIZGw5ZWFoR1ZWQjZxQmsxMGhKSm8wTFFZVmJwK1dpRjdiSU5pSHdZamdhRGJheGljVFlVbWh4ZWdmcTE2bk1NCjNXYjhDNWpmc3pCRzNKSWo1SmlqVURCT01CMEdBMVVkRGdRV0JCUk1LZW1mTmdId3pjSTd2dm9ISThuYkpmY3AKaWpBZkJnTlZIU01FR0RBV2dCUk1LZW1mTmdId3pjSTd2dm9ISThuYkpmY3BpakFNQmdOVkhSTUJBZjhFQWpBQQpNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJRXFvc2d6T2NGNFl1dHVTWmJ3NGQzQ3VuTW1NRTRwWVVpTWhRQ0tHCjlhSG5BaUVBempOWTZZSnh0Z0V3eHpnQlVtWFAxQTVJUzdFblVRQ2JjTGtHVURoM3VNTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        MCHP_manifest_signer_2_Aug-15-2019_Aug-15-2020.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ4ekNDQVd5Z0F3SUJBZ0lRYzZIeU1qcmtUMlRPWTE3RkFYN1hWakFLQmdncWhrak9QUVFEQWpBOE1TRXcKSHdZRFZRUUtEQmhOYVdOeWIyTm9hWEFnVkdWamFHNXZiRzluZVNCSmJtTXhGekFWQmdOVkJBTU1Ea3h2WnlCVAphV2R1WlhJZ01EQXlNQjRYRFRFNU1EZ3hOVEU1TkRjMU9Wb1hEVEl3TURneE5URTVORGMxT1Zvd1BERWhNQjhHCkExVUVDZ3dZVFdsamNtOWphR2x3SUZSbFkyaHViMnh2WjNrZ1NXNWpNUmN3RlFZRFZRUUREQTVNYjJjZ1UybG4KYm1WeUlEQXdNakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTENMcmdQbFQzT2V6bnREOWxDMgpTaHdVaGx4MDdmaXEvVkVUSitJVFVBd2JnclBqQi9YaTlHY2hMSU03RndaU1VHT0VxUkE2S3RIMzJYTXBUR0hLCm1DQ2pVREJPTUIwR0ExVWREZ1FXQkJUeFY0b1ozSlRaM3pCNi9yOVhNMGs0RTYvNXdEQWZCZ05WSFNNRUdEQVcKZ0JUeFY0b1ozSlRaM3pCNi9yOVhNMGs0RTYvNXdEQU1CZ05WSFJNQkFmOEVBakFBTUFvR0NDcUdTTTQ5QkFNQwpBMGtBTUVZQ0lRREtIZ2N0TG5xL3pOcWZCKzF2MEtSaERWUHZSZjZEaW10OGFXOVdMUzBOV0FJaEFKdlVlM3VKCnBrTUc0enBvdjlGQ29qNEczNDBpZEVhZG03bVZiQWQ1R09COQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        MCHP_manifest_signer_1_Jan-21-2019_Jul2-21-2019.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlCeGpDQ0FXeWdBd0lCQWdJUVpHSVd5TVpJOWNNY0JaaXBYeFRPV0RBS0JnZ3Foa2pPUFFRREFqQThNU0V3DQpId1lEVlFRS0RCaE5hV055YjJOb2FYQWdWR1ZqYUc1dmJHOW5lU0JKYm1NeEZ6QVZCZ05WQkFNTURreHZaeUJUDQphV2R1WlhJZ01EQXhNQjRYRFRFNU1ERXlNakF3TWpjME1sb1hEVEU1TURjeU1qQXdNamMwTWxvd1BERWhNQjhHDQpBMVVFQ2d3WVRXbGpjbTlqYUdsd0lGUmxZMmh1YjJ4dloza2dTVzVqTVJjd0ZRWURWUVFEREE1TWIyY2dVMmxuDQpibVZ5SURBd01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJFdTgvWnlSZFR1NE4wa3V1NzZDDQpSMUpSNXZ6MDRFdVJxTDRUUXhNaW5SaVVjM0h0cXkzOE82SHJYbzJxbU5veXJPMHhkMkkycGZRaFhXWXVMVDM1DQpNR1dqVURCT01CMEdBMVVkRGdRV0JCVHR3SWd1VUE3QmlqWDQ4S0VhNmpKUWhJd3JlREFmQmdOVkhTTUVHREFXDQpnQlR0d0lndVVBN0Jpalg0OEtFYTZqSlFoSXdyZURBTUJnTlZIUk1CQWY4RUFqQUFNQW9HQ0NxR1NNNDlCQU1DDQpBMGdBTUVVQ0lRRDkveDl6eG1Ia2VXR3dqRXE2N1FzUXFCVm1vWThrNlB2RlZyNEJ6MXRZT3dJZ1lmY2srZnYvDQpwbm84KzJ2VlRrUURoY2luTnJnb1BMUU9SelY1L2wvYjR6ND0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
        MCHP_manifest_signer_3_Aug-13-2020_Aug-13-2023.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ4akNDQVd5Z0F3SUJBZ0lRZHZiam1vRnZFUUNPV1VZY1dCNjNuREFLQmdncWhrak9QUVFEQWpBOE1TRXcKSHdZRFZRUUtEQmhOYVdOeWIyTm9hWEFnVkdWamFHNXZiRzluZVNCSmJtTXhGekFWQmdOVkJBTU1Ea3h2WnlCVAphV2R1WlhJZ01EQXpNQjRYRFRJd01EZ3hNekUyTkRReU9Wb1hEVEl6TURneE16RTJORFF5T1Zvd1BERWhNQjhHCkExVUVDZ3dZVFdsamNtOWphR2x3SUZSbFkyaHViMnh2WjNrZ1NXNWpNUmN3RlFZRFZRUUREQTVNYjJjZ1UybG4KYm1WeUlEQXdNekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2VRYlF3M1JSK0V1TXBJMWxCRAptcm10WlI1cFgzempuejU3eDlvNm1XdWRJUmdNdFh1TzdQUzVNT0ducXp0eGdyVUs3RVQ2OXVBalFqQzVUNC83CnEyV2pVREJPTUIwR0ExVWREZ1FXQkJTRjhLeXBWajY1QTFRazBwTDRzb1A5eVJqN1VUQWZCZ05WSFNNRUdEQVcKZ0JTRjhLeXBWajY1QTFRazBwTDRzb1A5eVJqN1VUQU1CZ05WSFJNQkFmOEVBakFBTUFvR0NDcUdTTTQ5QkFNQwpBMGdBTUVVQ0lRRFRGYmkyRVJCTnNLNW8xQTJ0MGFidERzNzgvS2FxL1FVY0hFbmxCK2owb1FJZ1Q3amVUU1R3CmUzUnpvMmVteXRnZXQ2Vm9nT1dsTU1WRGU5K3pkVVQ0cmNZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        MCHP_manifest_signer_4_Jul-18-2023_Jul-18-2026.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ4ekNDQVd5Z0F3SUJBZ0lRZjZQR0I0NEloZlhCV1VycVVLZEc3akFLQmdncWhrak9QUVFEQWpBOE1TRXcKSHdZRFZRUUtEQmhOYVdOeWIyTm9hWEFnVkdWamFHNXZiRzluZVNCSmJtTXhGekFWQmdOVkJBTU1Ea3h2WnlCVAphV2R1WlhJZ01EQTBNQjRYRFRJek1EY3hPREU0TXpjMU1Wb1hEVEkyTURjeE9ERTRNemMxTVZvd1BERWhNQjhHCkExVUVDZ3dZVFdsamNtOWphR2x3SUZSbFkyaHViMnh2WjNrZ1NXNWpNUmN3RlFZRFZRUUREQTVNYjJjZ1UybG4KYm1WeUlEQXdOREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQVR4aU9jbEdpb1RtTS81UkQ2bwo1dW96SkkyK29ZSU5uZmYybFZ3M004U25wSGREcFg3TXREU3o2bGNEclpHUlR1amwvQ2tvOWZMYVlBSHJyNUUzClRSU2pVREJPTUIwR0ExVWREZ1FXQkJTUEVSdFhVOXhraVpsWWEvSUNNT3ZkRnJISzVUQWZCZ05WSFNNRUdEQVcKZ0JTUEVSdFhVOXhraVpsWWEvSUNNT3ZkRnJISzVUQU1CZ05WSFJNQkFmOEVBakFBTUFvR0NDcUdTTTQ5QkFNQwpBMGtBTUVZQ0lRQ25DQUJlOGlRWmdTMkt6NDc2dUtRQmk0NTJDMUdlTEFvNStBOHFkQ0lCVXdJaEFPNGthUUwrCjZvb1NjcmdpbTA0V1lEcC9ZZ3JwTUNuYjY1VmpYRkNGdFRBRQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        
  # Allow Espressif bucket event to invoke the product provider function
  ThingpressProductVerifierInvokeFromEspressifPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressProductVerifierFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressEspressifManifestBucket.Arn

  # Allow Infineon bucket event to invoke the product provider function
  ThingpressProductVerifierInvokeFromInfineonPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressProductVerifierFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressInfineonManifestBucket.Arn

  # Allow Microchip bucket event to invoke the product provider function
  ThingpressProductVerifierInvokeFromMicrochipPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressProductVerifierFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressMicrochipManifestBucket.Arn

  # Invoked on S3 event, the product provider evaluates configuration
  # prior to passing along normalized configuration (object ARN resolution,
  # S3 object validation) to the supplier-specific queue.
  ThingpressProductVerifierFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub Thingpress-Product-Verifier-Role-${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: aws-api-calls
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeThingGroup
                  - iot:DescribeThingType
                  - iot:GetPolicy
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: '*'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ThingpressProductVerifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/product_verifier/
      Handler: main.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ThingpressProductVerifierFunctionRole.Arn
      Timeout: 300
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET_ESPRESSIF: !Ref ThingpressEspressifProviderQueue
          QUEUE_TARGET_INFINEON: !Ref ThingpressInfineonProviderQueue
          QUEUE_TARGET_MICROCHIP: !Ref ThingpressMicrochipProviderQueue
          QUEUE_TARGET_GENERATED: !Ref ThingpressGeneratedProviderQueue
          POLICY_NAME: !Ref IoTPolicy
          THING_GROUP_NAME: !Ref IoTThingGroup
          THING_TYPE_NAME: !Ref IoTThingType
      Events:
        EV1:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressInfineonManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .7z
        EV2:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressEspressifManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .csv
        EV3:
          Type: S3
          Properties:
            Bucket: !Ref ThingpressGeneratedManifestBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .txt

  # Dead letter queue for Generated provider
  ThingpressGeneratedProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Generated-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: !Ref DLQRetentionPeriod
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: DLQ

  # The product provider lambda function sends a message to this queue if the
  # manifest source comes from the Generated certificates bucket.
  ThingpressGeneratedProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Generated-Provider-Queue-${AWS::StackName}
      SqsManagedSseEnabled: true
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressGeneratedProviderDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Queue

  # Lambda function for processing generated certificates
  ThingpressGeneratedProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_generated/
      Handler: main.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: !Ref LambdaTimeout
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          POWERTOOLS_IDEMPOTENCY_TABLE: !Ref ThingpressIdempotencyTable
          POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: !Ref IdempotencyExpirySeconds
          # Throttling configuration
          AUTO_THROTTLING_ENABLED: !Ref AutoThrottlingEnabled
          THROTTLING_BASE_DELAY: !Ref ThrottlingBaseDelay
          THROTTLING_BATCH_INTERVAL: !Ref ThrottlingBatchInterval
          MAX_QUEUE_DEPTH: !Ref MaxQueueDepth
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ThingpressGeneratedManifestBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref ThingpressIdempotencyTable
        # Add permission to read queue attributes for throttling
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:GetQueueAttributes
              Resource: 
                - !GetAtt ThingpressBulkImporterQueue.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ThingpressGeneratedProviderQueue.Arn
            BatchSize: 10
            # Enhanced batch configuration for better throughput
            MaximumBatchingWindowInSeconds: 5
            FunctionResponseTypes:
              - ReportBatchItemFailures

  ThingpressEspressifProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Espressif-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: !Ref DLQRetentionPeriod
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: DLQ

  ThingpressEspressifProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Espressif-Provider-${AWS::StackName}
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressEspressifProviderDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Queue

  ThingpressEspressifProviderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressEspressifProviderQueue
      PolicyDocument:
        Id: EspressifProviderQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: EspressifProviderQueuePolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource:
              - !GetAtt ThingpressEspressifProviderQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductVerifierFunctionRole.Arn

  # Dead letter queue for Infineon provider
  ThingpressInfineonProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Infineon-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: !Ref DLQRetentionPeriod
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: DLQ

  ThingpressInfineonProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Infineon-Provider-${AWS::StackName}
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressInfineonProviderDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Queue

  ThingpressInfineonProviderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressInfineonProviderQueue
      PolicyDocument:
        Id: InfineonProviderQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: InfineonProviderQueuePolicySId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              - !GetAtt ThingpressInfineonProviderQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductVerifierFunctionRole.Arn

  # Dead letter queue for Microchip provider
  ThingpressMicrochipProviderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Microchip-Provider-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: !Ref DLQRetentionPeriod
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: DLQ

  ThingpressMicrochipProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Microchip-Provider-${AWS::StackName}
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressMicrochipProviderDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Queue

  ThingpressMicrochipProviderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressMicrochipProviderQueue
      PolicyDocument:
        Id: MicrochipProviderQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: MicrochipProviderQueuePolicySId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              - !GetAtt ThingpressMicrochipProviderQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductVerifierFunctionRole.Arn

  #--------------------------------------------------------------------------
  # Espressif provider function configuration
  #--------------------------------------------------------------------------
  ThingpressEspressifProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressEspressifProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressEspressifProviderQueue.Arn
  ThingpressEspressifProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_espressif/
      Handler: main.lambda_handler
      Runtime: python3.13
      Timeout: 900
      MemorySize: !Ref LambdaMemorySize
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          POWERTOOLS_IDEMPOTENCY_TABLE: !Ref ThingpressIdempotencyTable
          POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: !Ref IdempotencyExpirySeconds
          # Throttling configuration
          AUTO_THROTTLING_ENABLED: !Ref AutoThrottlingEnabled
          THROTTLING_BASE_DELAY: !Ref ThrottlingBaseDelay
          THROTTLING_BATCH_INTERVAL: !Ref ThrottlingBatchInterval
          MAX_QUEUE_DEPTH: !Ref MaxQueueDepth
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref ThingpressEspressifManifestBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref ThingpressIdempotencyTable
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressEspressifProviderQueue.Arn

  #--------------------------------------------------------------------------
  # Infineon provider function configuration
  #--------------------------------------------------------------------------
  ThingpressInfineonProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressInfineonProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressInfineonProviderQueue.Arn
  ThingpressInfineonProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_infineon/
      Handler: provider_infineon.main.lambda_handler
      Runtime: python3.13
      Timeout: 900
      MemorySize: !Ref LambdaMemorySize
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          CERT_TYPE: !Ref InfineonCertBundleType
          POWERTOOLS_IDEMPOTENCY_TABLE: !Ref ThingpressIdempotencyTable
          POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: !Ref IdempotencyExpirySeconds
          # Throttling configuration
          AUTO_THROTTLING_ENABLED: !Ref AutoThrottlingEnabled
          THROTTLING_BASE_DELAY: !Ref ThrottlingBaseDelay
          THROTTLING_BATCH_INTERVAL: !Ref ThrottlingBatchInterval
          MAX_QUEUE_DEPTH: !Ref MaxQueueDepth
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref ThingpressInfineonManifestBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref ThingpressIdempotencyTable
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressInfineonProviderQueue.Arn
  #--------------------------------------------------------------------------
  # Microchip provider function configuration
  #--------------------------------------------------------------------------
  ThingpressMicrochipProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressMicrochipProviderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressMicrochipProviderQueue.Arn
  ThingpressMicrochipProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/provider_microchip/
      Handler: provider_microchip.main.lambda_handler
      Runtime: python3.13
      Timeout: 900
      MemorySize: !Ref LambdaMemorySize
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          VERIFICATION_CERTS_BUCKET: !Ref ThingpressMicrochipVerificationCertsBucket
          POWERTOOLS_IDEMPOTENCY_TABLE: !Ref ThingpressIdempotencyTable
          POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: !Ref IdempotencyExpirySeconds
          # Throttling configuration
          AUTO_THROTTLING_ENABLED: !Ref AutoThrottlingEnabled
          THROTTLING_BASE_DELAY: !Ref ThrottlingBaseDelay
          THROTTLING_BATCH_INTERVAL: !Ref ThrottlingBatchInterval
          MAX_QUEUE_DEPTH: !Ref MaxQueueDepth
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref ThingpressMicrochipManifestBucket
        - S3ReadPolicy:
            BucketName: !Ref ThingpressMicrochipVerificationCertsBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref ThingpressIdempotencyTable
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressMicrochipProviderQueue.Arn

  #--------------------------------------------------------------------------
  # Bulk importer queue configuration
  #--------------------------------------------------------------------------
  # Dead letter queue for Bulk Importer
  ThingpressBulkImporterDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Bulk-Importer-DLQ-${AWS::StackName}
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: !Ref DLQRetentionPeriod
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: DLQ

  ThingpressBulkImporterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Thingpress-Bulk-Importer-${AWS::StackName}
      VisibilityTimeout: !Ref QueueVisibilityTimeout
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ThingpressBulkImporterDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Application
          Value: Thingpress
        - Key: Component
          Value: Queue

  ThingpressBulkImporterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressBulkImporterQueue
      PolicyDocument:
        Id: BulkImporterQueuePolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: BulkImporterQueuePolicySId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Effect: Allow
            Resource: !GetAtt ThingpressBulkImporterQueue.Arn
            Principal:
              AWS:
                - !GetAtt ThingpressProductVerifierFunctionRole.Arn
  #--------------------------------------------------------------------------
  # Bulk importer function configuration
  #--------------------------------------------------------------------------
  ThingpressBulkImporterInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThingpressBulkImporterFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ThingpressBulkImporterQueue.Arn
  ThingpressBulkImporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bulk_importer/
      Handler: bulk_importer.main.lambda_handler
      Runtime: python3.13
      ReservedConcurrentExecutions: !Ref ConcurrentExecutions
      Timeout: !Ref LambdaTimeout
      Layers:
        - !Ref ThingpressUtilsLayer
      Environment:
        Variables:
          QUEUE_TARGET: !Ref ThingpressBulkImporterQueue
          POWERTOOLS_IDEMPOTENCY_TABLE: !Ref ThingpressIdempotencyTable
          POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: !Ref IdempotencyExpirySeconds
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !GetAtt ThingpressBulkImporterQueue.QueueName
        - AWSIoTFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ThingpressIdempotencyTable
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt ThingpressBulkImporterQueue.Arn

  ThingpressEspressifProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressEspressifProviderDLQ
      PolicyDocument:
        Id: EspressifProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: EspressifProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressEspressifProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressEspressifProviderQueue.Arn

  ThingpressInfineonProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressInfineonProviderDLQ
      PolicyDocument:
        Id: InfineonProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: InfineonProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressInfineonProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressInfineonProviderQueue.Arn

  ThingpressMicrochipProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressMicrochipProviderDLQ
      PolicyDocument:
        Id: MicrochipProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: MicrochipProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressMicrochipProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressMicrochipProviderQueue.Arn

  ThingpressBulkImporterDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressBulkImporterDLQ
      PolicyDocument:
        Id: BulkImporterDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: BulkImporterDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressBulkImporterDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressBulkImporterQueue.Arn

  ThingpressGeneratedProviderDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ThingpressGeneratedProviderDLQ
      PolicyDocument:
        Id: GeneratedProviderDLQPolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: GeneratedProviderDLQPolicySId
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ThingpressGeneratedProviderDLQ.Arn
            Principal:
              Service: sqs.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ThingpressGeneratedProviderQueue.Arn

  # CloudWatch Alarms for SQS Throttling Monitoring
  ThingpressBulkImporterQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAutoThrottling
    Properties:
      AlarmName: !Sub Thingpress-Bulk-Importer-Queue-Depth-High-${AWS::StackName}
      AlarmDescription: Alert when bulk importer queue depth is high (throttling trigger)
      MetricName: ApproximateNumberOfMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref MaxQueueDepth
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ThingpressBulkImporterQueue.QueueName
      TreatMissingData: notBreaching

  ThingpressProcessingLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAutoThrottling
    Properties:
      AlarmName: !Sub Thingpress-Processing-Latency-High-${AWS::StackName}
      AlarmDescription: Alert when message processing latency is high
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 600  # 10 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ThingpressBulkImporterQueue.QueueName
      TreatMissingData: notBreaching

  ThingpressProviderConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAutoThrottling
    Properties:
      AlarmName: !Sub Thingpress-Provider-Concurrency-High-${AWS::StackName}
      AlarmDescription: Alert when provider function concurrency is at limit
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ProviderConcurrencyLimit
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ThingpressGeneratedProviderFunction
      TreatMissingData: notBreaching

  # CloudWatch Dashboard for Throttling Monitoring
  ThingpressThrottlingDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: EnableAutoThrottling
    Properties:
      DashboardName: !Sub Thingpress-Throttling-Monitor-${AWS::StackName}
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessages", "QueueName", "${ThingpressBulkImporterQueue.QueueName}" ],
                  [ ".", "ApproximateNumberOfMessagesNotVisible", ".", "." ],
                  [ ".", "NumberOfMessagesSent", ".", "." ],
                  [ ".", "NumberOfMessagesReceived", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "SQS Queue Metrics (Throttling Indicators)",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ThingpressGeneratedProviderFunction}" ],
                  [ ".", "Invocations", ".", "." ],
                  [ ".", "ConcurrentExecutions", ".", "." ],
                  [ ".", "Throttles", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Performance (Throttling Impact)"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateAgeOfOldestMessage", "QueueName", "${ThingpressBulkImporterQueue.QueueName}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Message Age (Processing Latency)",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            }
          ]
        }

Outputs:
  EspressifIngestPoint:
    Description: The Amazon S3 bucket for uploading Espressif manifests (CSV)
    Value: !Ref ThingpressEspressifManifestBucket
  InfineonIngestPoint:
    Description: The Amazon S3 bucket for uploading Infineon manifests (7z)
    Value: !Ref ThingpressInfineonManifestBucket
  MicrochipIngestPoint:
    Description: The Amazon S3 bucket for uploading Microchip manifests (JSON)
    Value: !Ref ThingpressMicrochipManifestBucket
  GeneratedIngestPoint:
    Description: The Amazon S3 bucket for uploading Generated certificate files (TXT)
    Value: !Ref ThingpressGeneratedManifestBucket
  MicrochipVerificationCertsBucket:
    Description: The Amazon S3 bucket containing Microchip verification certificates
    Value: !Ref ThingpressMicrochipVerificationCertsBucket
  IdempotencyTable:
    Description: The DynamoDB table used for idempotency tracking
    Value: !Ref ThingpressIdempotencyTable
  ProductVerifierFunction:
    Description: The Lambda function that verifies S3 uploads and routes to provider queues
    Value: !Ref ThingpressProductVerifierFunction
  EspressifProviderFunction:
    Description: The Lambda function that processes Espressif manifests
    Value: !Ref ThingpressEspressifProviderFunction
  InfineonProviderFunction:
    Description: The Lambda function that processes Infineon manifests
    Value: !Ref ThingpressInfineonProviderFunction
  MicrochipProviderFunction:
    Description: The Lambda function that processes Microchip manifests
    Value: !Ref ThingpressMicrochipProviderFunction
  GeneratedProviderFunction:
    Description: The Lambda function that processes generated certificate manifests
    Value: !Ref ThingpressGeneratedProviderFunction
  BulkImporterFunction:
    Description: The Lambda function that imports certificates to AWS IoT
    Value: !Ref ThingpressBulkImporterFunction
  EspressifProviderDLQ:
    Description: Dead letter queue for Espressif provider
    Value: !Ref ThingpressEspressifProviderDLQ
  InfineonProviderDLQ:
    Description: Dead letter queue for Infineon provider
    Value: !Ref ThingpressInfineonProviderDLQ
  MicrochipProviderDLQ:
    Description: Dead letter queue for Microchip provider
    Value: !Ref ThingpressMicrochipProviderDLQ
  GeneratedProviderDLQ:
    Description: Dead letter queue for Generated provider
    Value: !Ref ThingpressGeneratedProviderDLQ
  BulkImporterDLQ:
    Description: Dead letter queue for Bulk Importer
    Value: !Ref ThingpressBulkImporterDLQ
    
  # Throttling Configuration Outputs
  AutoThrottlingEnabled:
    Description: Whether automatic SQS throttling is enabled
    Value: !Ref AutoThrottlingEnabled
    
  ThrottlingBaseDelay:
    Description: Base delay for throttling calculations in seconds
    Value: !Ref ThrottlingBaseDelay
    
  ThrottlingBatchInterval:
    Description: Throttling delay applied every N batches
    Value: !Ref ThrottlingBatchInterval
    
  MaxQueueDepth:
    Description: Maximum queue depth before aggressive throttling
    Value: !Ref MaxQueueDepth
    
  ProviderConcurrencyLimit:
    Description: Maximum concurrent executions for provider functions
    Value: !Ref ProviderConcurrencyLimit
    
  ThrottlingDashboard:
    Condition: EnableAutoThrottling
    Description: CloudWatch dashboard for monitoring SQS throttling effectiveness
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ThingpressThrottlingDashboard}"