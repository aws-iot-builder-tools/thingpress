{
    "messages": [
        {
            "type": "convention",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "messageId": "C0301",
            "confidence": "UNDEFINED",
            "module": "src.bulk_importer.main",
            "obj": "",
            "line": 99,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/bulk_importer/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/bulk_importer/main.py"
        },
        {
            "type": "warning",
            "symbol": "fixme",
            "message": "TODO with idempotency added, may no longer need call to get_certificate.",
            "messageId": "W0511",
            "confidence": "UNDEFINED",
            "module": "src.bulk_importer.main",
            "obj": "",
            "line": 73,
            "column": 1,
            "endLine": null,
            "endColumn": null,
            "path": "src/bulk_importer/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/bulk_importer/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-argument",
            "message": "Unused argument 'context'",
            "messageId": "W0613",
            "confidence": "HIGH",
            "module": "src.bulk_importer.main",
            "obj": "certificate_key_generator",
            "line": 55,
            "column": 37,
            "endLine": 55,
            "endColumn": 44,
            "path": "src/bulk_importer/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/bulk_importer/main.py"
        },
        {
            "type": "convention",
            "symbol": "line-too-long",
            "message": "Line too long (109/100)",
            "messageId": "C0301",
            "confidence": "UNDEFINED",
            "module": "src.product_verifier.main",
            "obj": "",
            "line": 8,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/product_verifier/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/product_verifier/main.py"
        },
        {
            "type": "warning",
            "symbol": "fixme",
            "message": "TODO: verify s3 object, for now assume it is reachable",
            "messageId": "W0511",
            "confidence": "UNDEFINED",
            "module": "src.product_verifier.main",
            "obj": "",
            "line": 112,
            "column": 9,
            "endLine": null,
            "endColumn": null,
            "path": "src/product_verifier/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/product_verifier/main.py"
        },
        {
            "type": "warning",
            "symbol": "logging-fstring-interpolation",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1203",
            "confidence": "UNDEFINED",
            "module": "src.product_verifier.main",
            "obj": "lambda_handler",
            "line": 108,
            "column": 8,
            "endLine": 108,
            "endColumn": 96,
            "path": "src/product_verifier/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/product_verifier/main.py"
        },
        {
            "type": "warning",
            "symbol": "logging-fstring-interpolation",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1203",
            "confidence": "UNDEFINED",
            "module": "src.product_verifier.main",
            "obj": "lambda_handler",
            "line": 118,
            "column": 12,
            "endLine": 118,
            "endColumn": 93,
            "path": "src/product_verifier/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/product_verifier/main.py"
        },
        {
            "type": "warning",
            "symbol": "logging-fstring-interpolation",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1203",
            "confidence": "UNDEFINED",
            "module": "src.product_verifier.main",
            "obj": "lambda_handler",
            "line": 120,
            "column": 12,
            "endLine": 120,
            "endColumn": 94,
            "path": "src/product_verifier/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/product_verifier/main.py"
        },
        {
            "type": "convention",
            "symbol": "trailing-newlines",
            "message": "Trailing newlines",
            "messageId": "C0305",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_generated/__init__.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "unused-argument",
            "message": "Unused argument 'context'",
            "messageId": "W0613",
            "confidence": "HIGH",
            "module": "src.provider_generated.main",
            "obj": "file_key_generator",
            "line": 52,
            "column": 30,
            "endLine": 52,
            "endColumn": 37,
            "path": "src/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'SQSEvent' from outer scope (line 14)",
            "messageId": "W0621",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.main",
            "obj": "lambda_handler",
            "line": 170,
            "column": 8,
            "endLine": 170,
            "endColumn": 73,
            "path": "src/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'SQSEvent' (imported line 14)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "src.provider_generated.main",
            "obj": "lambda_handler",
            "line": 170,
            "column": 8,
            "endLine": 170,
            "endColumn": 73,
            "path": "src/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/main.py"
        },
        {
            "type": "convention",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (aws_lambda_powertools.utilities.data_classes.SQSEvent)",
            "messageId": "C0415",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.main",
            "obj": "lambda_handler",
            "line": 170,
            "column": 8,
            "endLine": 170,
            "endColumn": 73,
            "path": "src/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused SQSEvent imported from aws_lambda_powertools.utilities.data_classes",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.main",
            "obj": "",
            "line": 14,
            "column": 0,
            "endLine": 14,
            "endColumn": 65,
            "path": "src/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused idempotent_function imported from aws_lambda_powertools.utilities.idempotency",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.main",
            "obj": "",
            "line": 15,
            "column": 0,
            "endLine": 15,
            "endColumn": 75,
            "path": "src/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/main.py"
        },
        {
            "type": "convention",
            "symbol": "trailing-newlines",
            "message": "Trailing newlines",
            "messageId": "C0305",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_generated/provider_generated/__init__.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "unused-argument",
            "message": "Unused argument 'context'",
            "messageId": "W0613",
            "confidence": "HIGH",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "file_key_generator",
            "line": 55,
            "column": 30,
            "endLine": 55,
            "endColumn": 37,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'SQSEvent' from outer scope (line 14)",
            "messageId": "W0621",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "lambda_handler",
            "line": 175,
            "column": 8,
            "endLine": 175,
            "endColumn": 73,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'SQSEvent' (imported line 14)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "lambda_handler",
            "line": 175,
            "column": 8,
            "endLine": 175,
            "endColumn": 73,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "convention",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (aws_lambda_powertools.utilities.data_classes.SQSEvent)",
            "messageId": "C0415",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "lambda_handler",
            "line": 175,
            "column": 8,
            "endLine": 175,
            "endColumn": 73,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused SQSEvent imported from aws_lambda_powertools.utilities.data_classes",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "",
            "line": 14,
            "column": 0,
            "endLine": 14,
            "endColumn": 65,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused idempotent_function imported from aws_lambda_powertools.utilities.idempotency",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "",
            "line": 15,
            "column": 0,
            "endLine": 15,
            "endColumn": 75,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused send_sqs_message imported from layer_utils.aws_utils",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 24,
            "endColumn": 68,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused send_sqs_message_batch_with_retry imported from layer_utils.aws_utils",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 24,
            "endColumn": 68,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused send_sqs_message_with_adaptive_throttling imported from layer_utils.aws_utils",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 24,
            "endColumn": 68,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused send_sqs_message_with_throttling imported from layer_utils.aws_utils",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_generated.provider_generated.main",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 24,
            "endColumn": 68,
            "path": "src/provider_generated/provider_generated/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_generated/provider_generated/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-argument",
            "message": "Unused argument 'context'",
            "messageId": "W0613",
            "confidence": "HIGH",
            "module": "src.provider_espressif.main",
            "obj": "file_key_generator",
            "line": 52,
            "column": 30,
            "endLine": 52,
            "endColumn": 37,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "warning",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'SQSEvent' from outer scope (line 15)",
            "messageId": "W0621",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "lambda_handler",
            "line": 156,
            "column": 8,
            "endLine": 156,
            "endColumn": 73,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'SQSEvent' (imported line 15)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "src.provider_espressif.main",
            "obj": "lambda_handler",
            "line": 156,
            "column": 8,
            "endLine": 156,
            "endColumn": 73,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "convention",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (aws_lambda_powertools.utilities.data_classes.SQSEvent)",
            "messageId": "C0415",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "lambda_handler",
            "line": 156,
            "column": 8,
            "endLine": 156,
            "endColumn": 73,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused SQSEvent imported from aws_lambda_powertools.utilities.data_classes",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 15,
            "column": 0,
            "endLine": 15,
            "endColumn": 65,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "warning",
            "symbol": "unused-import",
            "message": "Unused idempotent_function imported from aws_lambda_powertools.utilities.idempotency",
            "messageId": "W0611",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 16,
            "column": 0,
            "endLine": 16,
            "endColumn": 75,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_generated.main:[25:93]\n==src.provider_generated.provider_generated.main:[28:94]\nlogger = Logger(service=\"provider_generated\")\ndefault_session: Session = Session()\n\nif os.environ.get(\"POWERTOOLS_IDEMPOTENCY_TABLE\") is None:\n    raise ValueError(\"Environment variable POWERTOOLS_IDEMPOTENCY_TABLE not set.\")\nPOWERTOOLS_IDEMPOTENCY_TABLE: str = os.environ[\"POWERTOOLS_IDEMPOTENCY_TABLE\"]\nif os.environ.get(\"POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\") is None:\n    POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: int = 3600\nPOWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: int = int(\n    os.environ.get(\"POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\", 3600))\n\n# Initialize persistence layer for idempotency\npersistence_layer = DynamoDBPersistenceLayer(\n    table_name=POWERTOOLS_IDEMPOTENCY_TABLE,\n    key_attr=\"id\",\n    expiry_attr=\"expiration\",\n    status_attr=\"status\",\n    data_attr=\"data\",\n    validation_key_attr=\"validation\"\n)\n\n# Configure idempotency\nidempotency_config = IdempotencyConfig(\n    expires_after_seconds=POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\n)\n\ndef file_key_generator(event, context):\n    \"\"\"Generate a unique key based on S3 bucket and key\"\"\"\n    if isinstance(event, dict) and \"bucket\" in event and \"key\" in event:\n        # Use bucket and key as the idempotency key\n        return f\"{event['bucket']}:{event['key']}\"\n    return None\n\n#@idempotent_function(\n#    persistence_store=persistence_layer,\n#    config=idempotency_config,\n#    event_key_generator=file_key_generator,\n#    data_keyword_argument=\"config\"\n#)\n\ndef process_certificate_file(config: Dict[str, Any], queue_url: str,\n                             session: Session=default_session) -> int:\n    \"\"\"\n    Process a file containing base64-encoded certificates (one per line) using batch processing.\n\n    Args:\n        config: Configuration dictionary with bucket and key information\n        queue_url: URL of the target SQS queue\n        session: AWS session to use\n\n    Returns:\n        Number of certificates processed\n    \"\"\"\n    logger.info({\n        \"message\": \"Processing certificate file\",\n        \"bucket\": config['bucket'],\n        \"key\": config['key']\n    })\n\n    # Get the file content from S3\n    file_content = s3_object_bytes(config['bucket'], config['key'], getvalue=True,\n                                   session=session).decode()\n\n    # Process certificates in batches for optimal SQS throughput\n    batch_messages = []\n    batch_size = 10  # SQS batch limit\n\n    # Initialize standardized throttler",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_espressif.main:[109:169]\n==src.provider_generated.main:[127:183]\n        \"total_certificates\": total_count,\n        \"total_batches\": throttling_stats[\"total_batches_processed\"],\n        \"api_calls_saved\": total_count - throttling_stats[\"total_batches_processed\"],\n        \"throttling_stats\": throttling_stats,\n        \"bucket\": config['bucket'],\n        \"key\": config['key']\n    })\n\n    return total_count\n\ndef lambda_handler(event, context: LambdaContext) -> dict: # pylint: disable=unused-argument\n    \"\"\"\n    Process certificate files generated by generate_certificates.py from SQS messages and\n    forward to target queue.\n\n    This Lambda function processes SQS messages containing S3 bucket and object information\n    for certificate files generated by the generate_certificates.py script. For each file:\n    1. Retrieves the file containing base64-encoded certificates (one per line) from S3\n    2. For each certificate in the file:\n       a. Extracts the Common Name (CN) from the certificate to use as the Thing name\n       b. Forwards the certificate data and Thing name to the target SQS queue\n\n    The certificate files are expected to contain one base64-encoded certificate per line,\n    with each certificate including its full chain.\n\n    Environment variables:\n        QUEUE_TARGET: URL of the SQS queue to forward processed certificates to\n\n    Args:\n        event (SQSEvent): SQS event containing messages with S3 bucket/object information\n        context (LambdaContext): Lambda execution context (unused)\n\n    Returns:\n        dict: The original event for AWS Lambda SQS batch processing\n    \"\"\"\n    # Handle both raw dict and SQSEvent object formats\n    if hasattr(event, 'records'):\n        # SQSEvent object format\n        sqs_event = event\n        raw_event = event.raw_event\n    else:\n        # Raw dict format - convert to SQSEvent\n        from aws_lambda_powertools.utilities.data_classes import SQSEvent\n        sqs_event = SQSEvent(event)\n        raw_event = event\n\n    queue_url = os.environ['QUEUE_TARGET']\n    total_processed = 0\n\n    for record in sqs_event.records:\n        config = json.loads(record.body)\n        logger.info({\n            \"message\": \"Processing SQS message\",\n            \"bucket\": config.get('bucket'),\n            \"key\": config.get('key')\n        })",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_espressif.main:[26:67]\n==src.provider_generated.main:[26:79]\ndefault_session: Session = Session()\n\nif os.environ.get(\"POWERTOOLS_IDEMPOTENCY_TABLE\") is None:\n    raise ValueError(\"Environment variable POWERTOOLS_IDEMPOTENCY_TABLE not set.\")\nPOWERTOOLS_IDEMPOTENCY_TABLE: str = os.environ[\"POWERTOOLS_IDEMPOTENCY_TABLE\"]\nif os.environ.get(\"POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\") is None:\n    POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: int = 3600\nPOWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: int = int(\n    os.environ.get(\"POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\", 3600))\n\n# Initialize persistence layer for idempotency\npersistence_layer = DynamoDBPersistenceLayer(\n    table_name=POWERTOOLS_IDEMPOTENCY_TABLE,\n    key_attr=\"id\",\n    expiry_attr=\"expiration\",\n    status_attr=\"status\",\n    data_attr=\"data\",\n    validation_key_attr=\"validation\"\n)\n\n# Configure idempotency\nidempotency_config = IdempotencyConfig(\n    expires_after_seconds=POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\n)\n\ndef file_key_generator(event, context):\n    \"\"\"Generate a unique key based on S3 bucket and key\"\"\"\n    if isinstance(event, dict) and \"bucket\" in event and \"key\" in event:\n        # Use bucket and key as the idempotency key\n        return f\"{event['bucket']}:{event['key']}\"\n    return None\n\n#@idempotent_function(\n#    persistence_store=persistence_layer,\n#    config=idempotency_config,\n#    event_key_generator=file_key_generator,\n#    data_keyword_argument=\"config\"\n#)\ndef invoke_export(config: dict, queue_url: str, session: Session=default_session):\n    \"\"\"Evaluate CSV based Espressif manifest\"\"\"\n    logger.info({",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_generated.main:[163:191]\n==src.provider_generated.provider_generated.main:[168:196]\n    if hasattr(event, 'records'):\n        # SQSEvent object format\n        sqs_event = event\n        raw_event = event.raw_event\n    else:\n        # Raw dict format - convert to SQSEvent\n        from aws_lambda_powertools.utilities.data_classes import SQSEvent\n        sqs_event = SQSEvent(event)\n        raw_event = event\n\n    queue_url = os.environ['QUEUE_TARGET']\n    total_processed = 0\n\n    for record in sqs_event.records:\n        config = json.loads(record.body)\n        logger.info({\n            \"message\": \"Processing SQS message\",\n            \"bucket\": config.get('bucket'),\n            \"key\": config.get('key')\n        })\n        total_processed += process_certificate_file(config, queue_url)\n\n    logger.info({\n        \"message\": \"Total certificates processed\",\n        \"count\": total_processed\n    })\n\n    return raw_event",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.bulk_importer.main:[27:56]\n==src.provider_generated.main:[26:53]\ndefault_session: Session = Session()\n\nif os.environ.get(\"POWERTOOLS_IDEMPOTENCY_TABLE\") is None:\n    raise ValueError(\"Environment variable POWERTOOLS_IDEMPOTENCY_TABLE not set.\")\nPOWERTOOLS_IDEMPOTENCY_TABLE: str = os.environ[\"POWERTOOLS_IDEMPOTENCY_TABLE\"]\nif os.environ.get(\"POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\") is None:\n    POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: int = 3600\nPOWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS: int = int(\n    os.environ.get(\"POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\", 3600))\n\n\n# Initialize persistence layer for idempotency\npersistence_layer = DynamoDBPersistenceLayer(\n    table_name=POWERTOOLS_IDEMPOTENCY_TABLE,\n    key_attr=\"id\",\n    expiry_attr=\"expiration\",\n    status_attr=\"status\",\n    data_attr=\"data\",\n    validation_key_attr=\"validation\"\n)\n\n# Configure idempotency with jitter for high-volume processing\nidempotency_config = IdempotencyConfig(\n    # Use jitter_key_generator for jitter instead of event_key_jitter\n    expires_after_seconds=POWERTOOLS_IDEMPOTENCY_EXPIRY_SECONDS\n)\n\ndef certificate_key_generator(event, context):\n    \"\"\"Generate a unique key based on certificate content and thing name\"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_espressif.main:[149:169]\n==src.provider_generated.provider_generated.main:[168:188]\n    if hasattr(event, 'records'):\n        # SQSEvent object format\n        sqs_event = event\n        raw_event = event.raw_event\n    else:\n        # Raw dict format - convert to SQSEvent\n        from aws_lambda_powertools.utilities.data_classes import SQSEvent\n        sqs_event = SQSEvent(event)\n        raw_event = event\n\n    queue_url = os.environ['QUEUE_TARGET']\n    total_processed = 0\n\n    for record in sqs_event.records:\n        config = json.loads(record.body)\n        logger.info({\n            \"message\": \"Processing SQS message\",\n            \"bucket\": config.get('bucket'),\n            \"key\": config.get('key')\n        })",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_espressif.main:[91:108]\n==src.provider_generated.main:[109:126]\n        batch_messages.append(cert_config)\n        total_count += 1\n\n        # Send batch when full\n        if len(batch_messages) >= batch_size:\n            throttler.send_batch_with_throttling(batch_messages, queue_url, session)\n            batch_messages = []\n\n    # Send remaining messages\n    if batch_messages:\n        throttler.send_batch_with_throttling(\n            batch_messages, queue_url, session, is_final_batch=True)\n\n    # Get throttling statistics for logging\n    throttling_stats = throttler.get_throttling_stats()\n\n    logger.info({",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_generated.main:[113:127]\n==src.provider_generated.provider_generated.main:[120:134]\n        if len(batch_messages) >= batch_size:\n            throttler.send_batch_with_throttling(batch_messages, queue_url, session)\n            batch_messages = []\n\n    # Send remaining messages\n    if batch_messages:\n        throttler.send_batch_with_throttling(\n            batch_messages, queue_url, session, is_final_batch=True)\n\n    # Get throttling statistics for logging\n    throttling_stats = throttler.get_throttling_stats()\n\n    logger.info({\n        \"message\": \"Processed certificates from file with standardized throttling\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_espressif.main:[95:108]\n==src.provider_generated.provider_generated.main:[120:133]\n        if len(batch_messages) >= batch_size:\n            throttler.send_batch_with_throttling(batch_messages, queue_url, session)\n            batch_messages = []\n\n    # Send remaining messages in final batch\n    if batch_messages:\n        throttler.send_batch_with_throttling(\n            batch_messages, queue_url, session, is_final_batch=True)\n\n    # Get throttling statistics for logging\n    throttling_stats = throttler.get_throttling_stats()\n\n    logger.info({",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==src.provider_generated.main:[96:107]\n==src.provider_generated.provider_generated.main:[99:112]\n    for line in file_content.splitlines():\n        line = line.strip()\n        if not line:\n            continue\n\n        # Create a copy of the config for this certificate\n        cert_config = config.copy()\n\n        # Store the certificate\n        cert_config['certificate'] = line\n        cert_bytes = base64.b64decode(line)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "src.provider_espressif.main",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "src/provider_espressif/main.py",
            "absolutePath": "/home/ANT.AMAZON.COM/elberger/src/thingpress/src/provider_espressif/main.py"
        }
    ],
    "statistics": {
        "messageTypeCount": {
            "fatal": 0,
            "error": 0,
            "warning": 25,
            "refactor": 10,
            "convention": 7,
            "info": 0
        },
        "modulesLinted": 14,
        "score": 8.7
    }
}
